; This is a comment
# This is a comment

; There are many short form options avaliable for dbget command line
; For example:
; -m  is a short form of -dbget.ModelName
; -do is a short form of -dbget.Do
;
; commands below are equal:
;
# dbget -do       all-runs -m               RiskPaths
# dbget -dbget.Do all-runs -dbget.ModelName RiskPaths
;
; -ini is a short form of -OpenM.IniFile
;
# dbget -ini           my.ini
# dbget -OpenM.IniFile my.ini

; boolean options can be: true, false, TRUR, FALSE, t, f, T, F, 1, 0

;----------------------------------------------------------------
;
[dbget]
;
# model name
;
; ModelName =     
;
# model name or model digest is required, it can be empty only for model-list action
#
# short form: -m
#
# dbget -do       all-runs -m               RiskPaths
# dbget -dbget.Do all-runs -dbget.ModelName RiskPaths

# model digest
;
; ModelDigest =
;
# use digest if you have multiple model versions with the same model name in the database
# model name or model digest is required


# action, what dbget should do:
;
; Do =
;
#  model-list     list of the models in database
#  model          model metadata
#  run-list       list of model runs
#  run            model run results: all parameters, output tables and microdata
#  all-runs       all model runs, all parameters, output tables and microdata
#  set-list       list of model input scenarios (a.k.a. "input set" or workset)
#  set            input scenario parameters
#  all-sets       all input scenarios, all parameter values
#  parameter      model run parameter values
#  parameter-set  input scenario parameter values
#  table          output table values (expressions)
#  sub-table      output table sub-values (a.k.a. sub-samples or accumulators)
#  sub-table-all  output table sub-values, including derived
#  table-compare  compare table values between model runs and / or aggeragate sub-values
#  micro          microdata values from model run results
#  micro-compare  aggregate and compare microdata between model runs
#  old-model      model metadata in Modgen compatible form
#  old-run        first model run results in Modgen compatible form
#  old-parameter  parameter values in Modgen compatible form
#  old-table      output table values in Modgen compatible form

;--------------------------------
;
# model run digest, stamp or name
;
; Run =
;
# short form: -r
#
# dbget -m modelOne -r         Default -parameter ageSex
# dbget -m modelOne -dbget.Run Default -parameter ageSex
#
# dbget -m modelOne -dbget.Run 2024_11_29_05_44_38_646          -parameter ageSex
# dbget -m modelOne -dbget.Run 5a5ff8a874bcf1fac9e123ac67062a1e -parameter ageSex

# model run id
;
; RunId =
;
# dbget -m modelOne -dbget.RunId 102 -parameter ageSex

# use first model run
;
; FirstRun = true
;
# default: false
#
# dbget -m modelOne -dbget.FirstRun      -parameter ageSex
# dbget -m modelOne -dbget.FirstRun=1    -parameter ageSex
# dbget -m modelOne -dbget.FirstRun=t    -parameter ageSex
# dbget -m modelOne -dbget.FirstRun=T    -parameter ageSex
# dbget -m modelOne -dbget.FirstRun=true -parameter ageSex
# dbget -m modelOne -dbget.FirstRun=TRUE -parameter ageSex

# use first model run
;
; LastRun = true
;
# default: false
#
# dbget -m modelOne -dbget.LastRun -parameter ageSex

# compare with one or more variant runs
;
; WithRuns = 
;
# comma separated list of run names or stamps or digests to compare with base run
#
# dbget -m modelOne -dbget.FirstRun -dbget.WithRuns Default-4,Sub-values_4,2024_11_29_17_08_09_146,....

# compare with one or more variant runs
;
; WithRunIds = 
;
# comma separated list of run id's to compare with base run
#
# dbget -m modelOne -dbget.FirstRun -dbget.WithRunIds 123,456,789 ....

# compare with first model run
;
; WithFirstRun = 
;
# default: false
#
# compare some base run with first model run as variant
#
# dbget -m modelOne -dbget.LastRun -dbget.WithFirstRun
# dbget -m modelOne -dbget.LastRun -dbget.WithFirstRun=true

# compare with last model run
;
; WithLastRun = 
;
# default: false
#
# compare some base run with first model run as variant
#
# dbget -m modelOne -dbget.FirstRun -dbget.WithLastRun
# dbget -m modelOne -dbget.FirstRun -dbget.WithLastRun=true

# model input set name (a.k.a. workset name or input scenario name)
;
; Set = 
;
# short form: -s
#
# dbget -m modelOne -s         Default -parameter ageSex
# dbget -m modelOne -dbget.Set Default -parameter ageSex

# model input set id (a.k.a. workset id or input scenario id)
;
; SetId = 
;
# dbget -m modelOne -dbget.SetId 101 -parameter ageSex

# parameter name
;
; Parameter = 
;
# use it to get parameter values from model run results
# or from input set (a.k.a. input scenario or workset)
#
# short form:  -parameter
# is equal to: -dbget.Do parameter -dbget.Parameter
#
# dbget -m modelOne -r Default -dbget.Do parameter -dbget.Parameter ageSex
# dbget -m modelOne -r Default -do       parameter -dbget.Parameter ageSex
# dbget -m modelOne -r Default -parameter                           ageSex
#
# short form:  -parameter-set
# is equal to: -dbget.Do parameter-set -dbget.Parameter
#
# dbget -m modelOne -s Default -dbget.Do parameter-set -dbget.Parameter ageSex
# dbget -m modelOne -s Default -do       parameter-set -dbget.Parameter ageSex
# dbget -m modelOne -s Default -parameter-set                           ageSex

# output table name
;
; Table = 
;
# use it to get output table values or sub-values (a.k.a sub-samples or accumulators)
#
# short form:  -table
# is equal to: -dbget.Do table -dbget.Table
#
# dbget -m modelOne -r Default -dbget.Do table -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -do       table -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -table                       T01_LifeExpectancy
#
# short form:  -sub-table
# is equal to: -dbget.Do sub-table -dbget.Table
#
# dbget -m modelOne -r Default -dbget.Do sub-table -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -do       sub-table -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -sub-table                       T01_LifeExpectancy
#
# short form:  -sub-table-all
# is equal to: -dbget.Do sub-table -dbget.Table
#
# dbget -m modelOne -r Default -dbget.Do sub-table-all -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -do       sub-table-all -dbget.Table T01_LifeExpectancy
# dbget -m modelOne -r Default -sub-table-all                       T01_LifeExpectancy

# microdata entity name
;
; Entity = 
;
# use it to get microdata values from model run results
#
# short form:  -micro
# is equal to: -dbget.Do micro -dbget.Entity
#
# dbget -m modelOne -r Default -dbget.Do micro -dbget.Entity Person
# dbget -m modelOne -r Default -do micro       -dbget.Entity Person
# dbget -m modelOne -r Default -micro                        Person

# output table calculation expression(s)
#
# dbget -m RiskPaths -do table-compare
#       -dbget.FirstRun
#       -dbget.WithLastRun
#       -dbget.Table     T04_FertilityRatesByAgeGroup
#       -dbget.Calculate Expr0[variant]-Expr0[base]
;
; Calculate =

# output table or microdata aggregation expression(s)
#
# dbget -m RiskPaths -do table-compare
#       -dbget.LastRun
#       -dbget.Table     T04_FertilityRatesByAgeGroup
#       -dbget.Aggregate OM_VAR(acc0)
#
# dbget -m modelOne
#       -do micro-compare
#       -r "Microdata in database"
#       -dbget.Entity    Person
#       -dbget.GroupBy   AgeGroup,Sex
#       -dbget.Aggregate OM_AVG(Income)
;
; Aggregate =

# comma separated list of dimensions or attributes to group by
# to compare model runs or aggeragate
;
; GroupBy =

# label for each aggregation and calculation expression
#
# dbget -m RiskPaths
#       -do table-compare
#       -dbget.LastRun
#       -dbget.Table     T04_FertilityRatesByAgeGroup
#       -dbget.Calculate Expr0[variant]-Expr0[base]
#       -dbget.CalcName  "Fertility Difference"
#       -dbget.Aggregate OM_VAR(Acc0)
#       -dbget.AggrName  "Fertility Variance"
#
# dbget -m modelOne
#       -do micro-compare
#       -r "Microdata in database"
#       -dbget.Entity    Person
#       -dbget.GroupBy   AgeGroup,Sex
#       -dbget.Aggregate "OM_AVG(Income), OM_VAR(Income)"
#       -dbget.AggrName  "Average Income, Income Variance"
;
; AggrName =
; CalcName =

;--------------------------------
;
# output format: csv, tsv or json
;
; As = csv
;
# default: .csv
# json is supported only for model metadata
# short forms are: -csv -tsv -json
#
# dbget -m modelOne -r Default -parameter ageSex
# dbget -m modelOne -r Default -parameter ageSex -csv
# dbget -m modelOne -r Default -parameter ageSex -dbget.As csv
#
# dbget -m modelOne -r Default -parameter ageSex -tsv
# dbget -m modelOne -r Default -parameter ageSex -dbget.As tsv
# 
# dbget -m modelOne -do model -json
# dbget -m modelOne -do model -dbget.As json

# output file name
;
; File =
;
# default depends on the action
# for example, command below creates ageSex.csv:
#
# dbget -m modelOne -r Default -parameter ageSex
#
# short form: -f
#
# dbget -m modelOne -r Default -parameter ageSex -f          my.csv
# dbget -m modelOne -r Default -parameter ageSex -dbget.File my.csv

# output directory to write .csv or .tsv files
;
; Dir =
;
# default depends on the action
# for example, command below creates directory RiskPaths.model
#
# dbget -m RiskPaths -do model
#
# short form: -dir
#
# dbget -m modelOne -r Default -parameter ageSex -dir       any/dir
# dbget -m modelOne -r Default -parameter ageSex -dbget.Dir any/dir
# dbget -m modelOne -r Default -parameter ageSex -dir       any/dir -f my.csv

# keep output directory if it is already exist
;
; KeepOutputDir = false
;
# default: false
# by default output directory deleted, if it is already exists

# if true then use stdout and do not create file(s)
;
; ToConsole = false
;
# by default only log messages are displayed in console
#
# short form:  -pipe
# is equal to: -dbget.ToConsole -OpenM.LogToConsole=false
# !!! important:
#     -pipe suppress any error messages output to console
#     check exit code using $? or ERRORLEVEL
#     or enable log output to file: -OpenM.LogToFile (see below)
#
# dbget -m modelOne -r Default -parameter ageSex -dbget.ToConsole
# dbget -m modelOne -r Default -parameter ageSex -dbget.ToConsole=true
#
# dbget -m modelOne -r Default -parameter ageSex -dbget.ToConsole -OpenM.LogToConsole=false
# dbget -m modelOne -r Default -parameter ageSex -pipe
# dbget -m modelOne -r Default -parameter ageSex -pipe -OpenM.LogToFile

;--------------------------------
;
# prefered output language: fr-CA
;
; Language =
;
# default: user OS language
#
# short form:  -lang
#
# dbget -m modelOne -r Default -parameter ageSex -dbget.Language FR
# dbget -m modelOne -r Default -parameter ageSex -dbget.Language fr-CA
# dbget -m modelOne -r Default -parameter ageSex -lang           fr

# if true then do language-neutral output: enum codes and "C" formats
;
; NoLanguage = false
;
# default: false
#
# dbget -m modelOne -r Default -parameter ageSex -dbget.NoLanguage
# dbget -m modelOne -r Default -parameter ageSex -dbget.NoLanguage=true

# if true then do language-neutral output: enum Ids and "C" formats
;
; IdCsv = false
;
# default: false
#
# dbget -m modelOne -r Default -parameter ageSex -dbget.IdCsv
# dbget -m modelOne -r Default -parameter ageSex -dbget.IdCsv=true

# if true then do not write zero values into output tables or microdata csv default: false
;
; NoZeroCsv = false

# if true then do not write NULL values into output tables or microdata csv,  default: false
;
; NoNullCsv = false

# convert to string format for float and double, default: %.15g
;
; DoubleFormat = %.15g

# if true then output notes into .md files, default: false
;
; Notes = false

# if true then write utf-8 byt order mark into output CSV or TSV files, default: false
;
; Utf8Bom = false

# code page for converting source files, e.g. windows-1252
;
; CodePage = 
;
# by default detect utf-8 encoding or use OS-specific default: windows-1252 on Windowds and utf-8 outside

;--------------------------------
;
# database connection string options
;
; Sqlite =                  # input db is SQLite file
; Database =                # db connection string
; DatabaseDriver = SQLite   # db driver name, ie: SQLite, odbc, sqlite3
;
# by default driver: SQLite
#
# short form:  -db           path/to/my.sqlite
# is equal to: -dbget.Sqlite path/to/my.sqlite
# is equal to: -dbget.DatabaseDriver SQLite -dbget.Database "Database=path/to/my.sqlite; Timeout=86400; OpenMode=ReadOnly;"
#
# if no database options specified then by default ModelName.sqlite file expected to be in current directory
#
# dbget -m RiskPaths -do all-runs
# dbget -m RiskPaths -do all-runs -db RiskPaths.sqlite
# dbget -m RiskPaths -do all-runs -db path/to/my/RiskPaths.sqlite


;----------------------------------------------------------------
;
[OpenM]
;
; LogToConsole = true      # if true then log to standard output
; LogToFile = false        # if true then log to file
; LogFilePath = dbget.log  # log file path, default = current/dir/exeName.log
; LogUseTimeStamp = false  # if true then use time-stamp in log file name
; LogUsePidStamp = false   # if true then use pid-stamp in log file name
; LogSql = false           # if true then log sql statements into log file

; "-v" is a short form of "-OpenM.LogToConsole"

; log settings:
; log can be enabled/disabled for 3 independent streams:
;   console             - standard output
;   "current" log file  - log file with specified name, overwritten on every model run
;   "stamped" log file  - log file with unique name, created for every model run
;
; "stamped" name produced from "current" name by adding time-stamp and/or pid-stamp, i.e.:
;   dbget.log => oms.2012_08_17_16_04_59_148.123456.log
